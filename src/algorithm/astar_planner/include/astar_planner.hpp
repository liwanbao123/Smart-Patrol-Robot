#ifndef A_STAR_PLANNER_HPP_
#define A_STAR_PLANNER_HPP_

#include <string>
#include <memory>

#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/point.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"

#include "nav2_core/global_planner.hpp"
#include "nav_msgs/msg/path.hpp"
#include "nav_msgs/msg/occupancy_grid.hpp"
#include "nav2_util/robot_utils.hpp"
#include "nav2_util/lifecycle_node.hpp"
#include "nav2_costmap_2d/costmap_2d_ros.hpp"

#include "a_star.h"

namespace astar_planner
{

class AStarPlanner : public nav2_core::GlobalPlanner
{
public:
  AStarPlanner() = default;
  ~AStarPlanner() = default;

  // plugin configure
  void configure(const rclcpp_lifecycle::LifecycleNode::WeakPtr& parent, std::string name,
                 std::shared_ptr<tf2_ros::Buffer> tf,
                 std::shared_ptr<nav2_costmap_2d::Costmap2DROS> costmap_ros) override;

  // plugin cleanup
  void cleanup() override;

  // plugin activate
  void activate() override;

  // plugin deactivate
  void deactivate() override;

  /**
   * @brief Creating a plan from start and goal poses
   * @param start Start pose
   * @param goal Goal pose
   * @param cancel_checker Function to check if the action has been canceled
   * @return nav2_msgs::Path of the generated path
   */
  nav_msgs::msg::Path createPlan(const geometry_msgs::msg::PoseStamped& start,
                                 const geometry_msgs::msg::PoseStamped& goal) override;

protected:
  /**
   * @brief publish expand zone
   * @param expand set of expand nodes
   */
  void _publishExpand(std::vector<Node>& expand);

  /**
   * @brief Calculate plan from planning path
   * @param path path generated by global planner
   * @param plan plan transfromed from path, i.e. [start, ..., goal]
   * @return bool true if successful, else false
   */
  bool _getPlanFromPath(std::vector<Node>& path, nav_msgs::msg::Path& plan);

protected:
  rclcpp::Logger logger_{ rclcpp::get_logger("AStarPlanner") };
  std::unique_ptr<global_planner::AStar> planner_;
  bool initialized_{ false };  // initialization flag
  rclcpp::Clock::SharedPtr clock_;
  unsigned int nx_, ny_;                                                   // costmap size
  double resolution_;                                                      // costmap resolution
  std::string frame_id_;                                                   // costmap frame ID
  rclcpp::Publisher<nav_msgs::msg::OccupancyGrid>::SharedPtr expand_pub_;  // nodes explorer publisher

private:
  std::shared_ptr<tf2_ros::Buffer> tf_;       // TF buffer
  nav2_util::LifecycleNode::SharedPtr node_;  // node ptr
  nav2_costmap_2d::Costmap2D* costmap_;       // Global Costmap
  std::string name_;                          // The name of the costmap
};

}  // namespace astar_planner

#endif